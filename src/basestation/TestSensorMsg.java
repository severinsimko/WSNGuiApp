package basestation;

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'TestSensorMsg'
 * message type.
 */

public class TestSensorMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 13;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 134;

    /** Create a new TestSensorMsg of size 2. */
    public TestSensorMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new TestSensorMsg of the given data_length. */
    public TestSensorMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSensorMsg with the given data_length
     * and base offset.
     */
    public TestSensorMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSensorMsg using the given byte array
     * as backing store.
     */
    public TestSensorMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSensorMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public TestSensorMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSensorMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public TestSensorMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSensorMsg embedded in the given message
     * at the given base offset.
     */
    public TestSensorMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSensorMsg embedded in the given message
     * at the given base offset and length.
     */
    public TestSensorMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <TestSensorMsg> \n";
      try {
        s += "  [counter=0x"+Long.toHexString(get_time_stamp())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: counter
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field is signed (false).
     */
    public static boolean isSigned_node_id() {
        return false;
    }
    
    public static boolean isSigned_time_stamp() {
        return false;
    }
    
    public static boolean isSigned_value() {
        return false;
    }
    
    public static boolean isSigned_accelx() {
        return false;
    }
    
    public static boolean isSigned_accely() {
        return false;
    }
    
    public static boolean isSigned_accelz() {
        return false;
    }


    /**
     * Return whether the field is an array (false).
     */
    public static boolean isArray_node_id() {
        return false;
    }

    public static boolean isArray_time_stamp() {
        return false;
    }

    public static boolean isArray_value() {
        return false;
    }
    
    public static boolean isArray_accelx() {
        return false;
    }
    
    public static boolean isArray_accely() {
        return false;
    }
    
    public static boolean isArray_accelz() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field
     */
    public static int offset_node_id() {
        return 0;
    }

    public static int offset_time_stamp() {
        return 1;
    }

    public static int offset_value() {
        return 5;
    }
    
    public static int offset_accelx() {
        return 7;
    }
    
    public static int offset_accely() {
        return 9;
    }
    
    public static int offset_accelz() {
        return 11;
    }

    /**
     * Return the offset (in bits) of the field
     */
    public static int offsetBits_node_id() {
        return 0;
    }

    public static int offsetBits_time_stamp() {
        return 8;
    }

    public static int offsetBits_value() {
        return 40;
    }
    
    public static int offsetBits_accelx() {
        return 56;
    }
    
    public static int offsetBits_accely() {
        return 72;
    }
    
    public static int offsetBits_accelz() {
        return 88;
    }

    /**
     * Return the value (as a int) of the field
     */
    public int get_node_id() {
        return (int)getUIntBEElement(offsetBits_node_id(), 8);
    }

    public int get_time_stamp() {
        return (int)getUIntBEElement(offsetBits_time_stamp(), 32);
    }

    public int get_value() {
        return (int)getUIntBEElement(offsetBits_value(), 16);
    }
    
    public int get_accelx() {
        return (int)getUIntBEElement(offsetBits_accelx(), 16);
    }
    
    public int get_accely() {
        return (int)getUIntBEElement(offsetBits_accely(), 16);
    }
    
    public int get_accelz() {
        return (int)getUIntBEElement(offsetBits_accelz(), 16);
    }

    /**
     * Set the value of the field
     */
    public void set_node_id(int value) {
        setUIntBEElement(offsetBits_node_id(), 8, value);
    }

    public void set_time_stamp(int value) {
        setUIntBEElement(offsetBits_time_stamp(), 32, value);
    }

    public void set_value(int value) {
        setUIntBEElement(offsetBits_value(), 16, value);
    }
    
    public void set_accelx(int value) {
        setUIntBEElement(offsetBits_accelx(), 16, value);
    }
    
    public void set_accely(int value) {
        setUIntBEElement(offsetBits_accely(), 16, value);
    }
    
    public void set_accelz(int value) {
        setUIntBEElement(offsetBits_accelz(), 16, value);
    }

    /**
     * Return the size, in bytes
     */
    public static int size_node_id() {
        return 1;
    }

    public static int size_time_stamp() {
        return 4;
    }

    public static int size_value() {
        return 2;
    }
    
    public static int size_accelx() {
        return 2;
    }
    
    public static int size_accely() {
        return 2;
    }
    
    public static int size_accelz() {
        return 2;
    }

    /**
     * Return the size, in bits
     */
    public static int sizeBits_node_id() {
        return 8;
    }

    public static int sizeBits_time_stamp() {
        return 32;
    }

    

    public static int sizeBits_value() {
        return 16;
    }
    
    public static int sizeBits_accelx() {
        return 16;
    }
    
    public static int sizeBits_accely() {
        return 16;
    }
    
    public static int sizeBits_accelz() {
        return 16;
    }

}
